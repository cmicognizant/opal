#!/usr/bin/python

import sys
import re
import logging
import subprocess
import json
import time
from ConfigParser import ConfigParser
from urllib import quote_plus
import shutil
from os import path, listdir
from os.path import expanduser, isfile

verbose = '-v' in sys.argv
quiet = '-q' in sys.argv

config = ConfigParser()
config.read(expanduser('~/.opal/fileupload.conf'))

url = config.get('main', 'url')
file_type = config.get('main', 'file_type')
move_file = config.getboolean('main', 'move_file')
src_folder = expanduser(config.get('main', 'src_folder'))
done_folder = expanduser(config.get('main', 'done_folder'))
opal_folder = config.get('main', 'opal_folder')
logfile = expanduser(config.get('main', 'logfile'))

if config.getboolean('main', 'use_certificate'):
    auth_params = ['-o', url, '-sc', config.get('main', 'ssl_cert'), '-sk', config.get('main', 'ssl_key')]
else:
    auth_params = ['-o', url, '-u', config.get('main', 'user'), '-p', config.get('main', 'password')]


# standard logging to the logfile
logging.basicConfig(filename=logfile, level=logging.DEBUG)
# add a log handler to emit some messages to stderr
stderrhandler = logging.StreamHandler()
stderrhandler.setLevel(logging.INFO)
if verbose:
    stderrhandler.setLevel(logging.DEBUG)
if quiet:
    stderrhandler.setLevel(logging.WARN)
logging.getLogger().addHandler(stderrhandler)


def u(it):
    return quote_plus(str(it))

class ImportFile:
    def __init__(self, filename):
        self.name = filename
        # filename should be in the format <timestamp>_<project_name>_<table_name>_<operation>.csv
        # example: 20140503140523_mdsantwerp_lifelines_upd.csv
        match = re.match(r'(\d+)_([^_]+)_([^_]+)(.*)\.csv', filename)
        if not match:
            raise Exception('File name does not match expected format: '
                            '<timestamp>_<project_name>_<table_name>.csv')
        self.timestamp, self.project, self.table = match.groups()[0:3]
        self.path = path.join(src_folder, filename)
        self.entity_type = self.get_entity_type()

    # processes one ImportFile
    def process(self):
        logging.info('processing '+self.name)

        self.upload()
        self.import_()
        self.reindex()
        if move_file:
            self.move_away()

        logging.info('finished processing ' + self.name)

    def get_entity_type(self):
        logging.info('loading entity type for table {0}'.format(self.table))
        res = json.loads(run_command(['opal', 'rest'] + auth_params + [
            '-v', '/datasource/{0}/table/{1}'.format(u(self.project), u(self.table))]))
        return res['entityType']

    def upload(self):
        #opal file -o <url> -u administrator -p password -up sample.csv /data_import
        #opal file -o http://localhost:8080 -sc server.crt -sk server.key -up sample.csv /data_import
        upload_cmd = ['opal', 'file'] + auth_params + ['-up', self.path, opal_folder]
        run_command(upload_cmd)
        
    def import_(self):
        # opal import-csv -o <opal_base_url> -u <username> -p <password> -d <project> -i
        #      -pa <opalfs_self_path> -ty <entity_type> -t <table>
        import_cmd = ['opal', 'import-csv'] + auth_params + ['-d', self.project, '-i', 
                      '-pa', opal_folder+'/'+self.name, '-ty', self.entity_type, '-t', self.table]
        result = json.loads(run_command(import_cmd))
        job_id = result['id']
        status = result['status']
        if status == 'IN_PROGRESS':
            if not quiet: sys.stderr.write('Waiting for import to finish')
            while status == 'IN_PROGRESS':
                if not quiet: sys.stderr.write('.')
                time.sleep(1)
                result = json.loads(run_command(['opal', 'rest'] + auth_params + [
                                                 '-v', '/project/{0}/command/{1}'.format(u(self.project), u(job_id))]))
                status = result['status']
                if status == 'FAILED':
                    raise Exception('Import job failed: {0}'.format(self.name))
            if not quiet: sys.stderr.write('\n')

    def reindex(self):
        logging.info('rebuilding index for project {0}, table {1}'.format(self.project, self.table))
        reindex_cmd = ['opal', 'rest'] + auth_params + [
            '-v', '/datasource/{0}/table/{1}/index'.format(u(self.project), u(self.table)), '-m', 'PUT']
        run_command(reindex_cmd)

    def move_away(self):
        logging.info('moving {0} to {1}'.format(self.path, done_folder))
        shutil.move(self.path, done_folder)


def run_command(cmd):
    logging.debug('executing ' + ' '.join(cmd))
    try:
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = process.communicate()
        retcode = process.wait()
        logging.debug(err+'\n'+out)
        if retcode != 0:
            logging.error('subcommand exited with return code {0}: {1}'.format(retcode, ' '.join(cmd)))
            err = subprocess.CalledProcessError(retcode, popenargs[0])
            err.output = output
            raise err
        return out
    except:
        process.kill()
        process.wait()
        raise


# returns a list of ImportFile, ordered by date (oldest first)
def get_files():
    list = []
    for f in listdir(src_folder):
        fullname = path.join(src_folder, f)
        if isfile(fullname) and f.endswith('.'+file_type):
            list.append(ImportFile(f))

    list.sort(key=lambda f: f.name)
    return list


def main():
    try:
        files = get_files()
        if not files:
            logging.warn('Source directory is empty, nothing to do')
        for file in files:
            file.process()
        logging.info('done')
    except Exception as e:
        logging.error(e)
        if not verbose:
            print >>sys.stderr, "Run '{0} -v' for more information".format(sys.argv[0])
        logging.debug(e, exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    main()
