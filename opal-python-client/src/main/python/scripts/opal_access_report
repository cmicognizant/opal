#!/usr/bin/python

from __future__ import print_function
import sys
import re

def get_matches(filepath, regex):
    """
    Gets a list of regex group dictionaries for the matching lines in the given file path.
    The regular expression should define the named groups to extract
    """

    prog = re.compile(regex)

    result = []
    with open(filepath, "rb") as file:
        for line in file:
            m = prog.match(line)
            if m is not None:
                result.append(m.groupdict())
    #@todo: do we need to close the file
    return result

def rest_line_regex(message, status):
    """
    Creates the regular expression pattern to match entries with a given message.
    If status is not None, then the http status code must also be matched
    """

    parts = []
    parts.append('"@timestamp":"(?P<datetime>.*)"')
    parts.append('"message":"' + message + '"')
    parts.append('"username":"(?P<username>[\w\s_-]+)"')
    if status is not None:
        parts.append('"status":"' + status + '"')
    result = '.*' + ',.*'.join(parts) + '.*'
    return result

def valueset_accesses_regex():
    """
    Creates the regular expression pattern to match valueset accesses with code http status 200
    Groups to extract: datetime, username, datasource and table
    """

    return rest_line_regex('/datasource/(?P<datasource>.*)/table/(?P<table>.*)/valueSets/_search.*', '200')

def filter_entries(list, filter):
    for el in list:
        if filter(el): yield el

def transform_entries(list, transformer):
    for el in list: yield transformer(el)

def report(files, regex, filter, transformer, aggregator, template):

    result = []
    for file in files:
        # 1 - obtain the matches
        matches = get_matches(sys.argv[1], regex)

        # 2 - filter
        if filter is not None:
            matches = filter_entries(matches, filter)

        # 3 - map
        if transformer is not None:
            matches = transform_entries(matches, transformer)

        result.extend(matches)

    # 4 - aggregate
    if aggregator is not None:
        result = aggregator(result)

    # 5 - create PDF
    for e in result:
        print(e)


if len(sys.argv) < 2:
    raise StandardError("No file arguments")

# Regular expression to use (defines the groups to be returned)
regex = valueset_accesses_regex()

# Filter function: IN: dictionary, OUT: true to keep/accept the element, false otherwise
filter = None
#filter = lambda e: e['username'] != 'administrator'

# Transform function: IN: dictionary, OUT: transformed dictionary
transformer = None

# Aggregator function: IN: list of dictionaries, OUT: aggregated list of dictionaries
aggregator = None

#PDF template
template = None

files = []
files.append(sys.argv[1])

report(files, regex, filter, transformer, aggregator, template)
